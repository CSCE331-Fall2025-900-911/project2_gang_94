Special Queries

1. Weekly_Sales.sql
SELECT
    EXTRACT(YEAR FROM orderdate) AS year,
    EXTRACT(WEEK FROM orderdate) AS week_number,
    COUNT(orderid) AS orders_placed
FROM Customers
GROUP BY year, week_number
ORDER BY year, week_number;



2. Realistic_sales.sql
SELECT
    EXTRACT(HOUR FROM orderdate) AS order_hour,
    COUNT(orderid) AS orders_placed,
    SUM(balancespent) AS total_sales
FROM Customers
GROUP BY order_hour
ORDER BY order_hour;



3. PeakSalesDay.sql
-- Special Query #3: Peak Sales Day


SELECT
    CAST(orderdate AS DATE) AS order_day,
    SUM(balancespent) AS daily_sales
FROM Customers
GROUP BY order_day
ORDER BY daily_sales DESC
LIMIT 10;





4.total_inventory_values.sql
SELECT SUM(quantity * cost) AS total_value
FROM onhandinventory;

5. seasonal_profits.sql
SELECT
    CASE
        WHEN EXTRACT(MONTH FROM startdate) IN (12, 1, 2) THEN 'Winter'
        WHEN EXTRACT(MONTH FROM startdate) IN (3, 4, 5) THEN 'Spring'
        WHEN EXTRACT(MONTH FROM startdate) IN (6, 7, 8) THEN 'Summer'
        ELSE 'Fall'
    END AS season,
    SUM(totalsales-totalexpenses)::numeric::money as profit
FROM profits
GROUP BY season
ORDER BY profit;




6. Orders_with_toppings.sql
SELECT
    EXTRACT(YEAR FROM orderdate) AS year,
    EXTRACT(MONTH FROM orderdate) AS month,
    COUNT(*)
FROM customers
WHERE itemsused LIKE '%add%'
GROUP BY year, month
ORDER BY month;

7. Most_expensive_repair.sql
SELECT *
FROM maintenance
ORDER BY costofrepair DESC
LIMIT 1;



8.monthly_expenses_net_profits.sql
SELECT  
    EXTRACT(YEAR FROM startdate) AS sales_year,
    EXTRACT(MONTH FROM startdate) AS sales_month,
    CASE
        WHEN EXTRACT(MONTH FROM startdate) = 1 THEN 'January'
        WHEN EXTRACT(MONTH FROM startdate) = 2 THEN 'February'
        WHEN EXTRACT(MONTH FROM startdate) = 3 THEN 'March'
        WHEN EXTRACT(MONTH FROM startdate) = 4 THEN 'April'
        WHEN EXTRACT(MONTH FROM startdate) = 5 THEN 'May'
        WHEN EXTRACT(MONTH FROM startdate) = 6 THEN 'June'
        WHEN EXTRACT(MONTH FROM startdate) = 7 THEN 'July'
        WHEN EXTRACT(MONTH FROM startdate) = 8 THEN 'August'
        WHEN EXTRACT(MONTH FROM startdate) = 9 THEN 'September'
        WHEN EXTRACT(MONTH FROM startdate) = 10 THEN 'October'
        WHEN EXTRACT(MONTH FROM startdate) = 11 THEN 'November'
        WHEN EXTRACT(MONTH FROM startdate) = 12 THEN 'December'
        ELSE 'unlabeled'
    END AS season,
    SUM(totalexpenses)::numeric::money AS monthlyexpenses,
    SUM(totalsales-totalexpenses)::numeric::money as net_profit
FROM profits
GROUP BY sales_year, sales_month, season
ORDER BY sales_year, sales_month;

9. Longest_employee.sql
--query the find the longest working employee every day  
SELECT name, schedule_date, hours_worked
FROM Employees e1
WHERE hours_worked = (
    SELECT MAX(hours_worked)
    FROM Employees e2
    WHERE e2.schedule_date = e1.schedule_date);



10.expire_7_days.sql
--finds the on hand inventories that expires in the next seven days
SELECT itemid, itemname, expiration
FROM onhandinventory
WHERE expiration < CURRENT_DATE + INTERVAL '7 days';

11. Employeers_by_served_nojoin.sql
SELECT DISTINCT "name", SUM(customers_served) AS customers_served
FROM employees GROUP BY "name";






12. Compare_to_peak.sql
SELECT
    '2024-12-25' AS peak_day,
    SUM(CASE WHEN DATE(orderdate) = '2024-12-25' THEN balancespent ELSE 0 END)::numeric::money AS peak_sale,
    (SELECT
        AVG(daily_sales)::numeric::money
    FROM (
        SELECT
            DATE(orderdate) AS day,
            SUM(balancespent) AS daily_sales
        FROM Customers
        GROUP BY day
    ) t)::money AS daily_totals
FROM customers;

